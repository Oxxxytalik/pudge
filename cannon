from random import randrange as rnd, choice
import tkinter as tk
import math
import time
from tkinter.constants import X

# print (dir(math))

root = tk.Tk()
fr = tk.Frame(root)
root.geometry('800x600')
canv = tk.Canvas(root, bg='white')
canv.pack(fill=tk.BOTH, expand=1)
points = 0


class ball():
    def __init__(self, x=40, y=450):
        """ Конструктор класса ball

        Args:
        x - начальное положение мяча по горизонтали
        y - начальное положение мяча по вертикали
        """
        self.x = x
        self.y = y
        self.r = 10
        self.vx = 0
        self.vy = 0
        self.dth = 0
        self.fall = 0
        self.color = choice(['blue', 'green', 'red', 'brown'])
        self.id = canv.create_oval(
                self.x - self.r,
                self.y - self.r,
                self.x + self.r,
                self.y + self.r,
                fill=self.color
        )
        self.live = 30

    def set_coords(self):
        canv.coords(
                self.id,
                self.x - self.r,
                self.y - self.r,
                self.x + self.r,
                self.y + self.r
        )

    def move(self):
        """Переместить мяч по прошествии единицы времени.

        Метод описывает перемещение мяча за один кадр перерисовки. То есть, обновляет значения
        self.x и self.y с учетом скоростей self.vx и self.vy, силы гравитации, действующей на мяч,
        и стен по краям окна (размер окна 800х600).
        """

        if self.dth < 4:
            self.x += self.vx
            self.y -= self.vy
        else:
            self.fall = 1
            root.after(300, canv.delete(self.id))

        if self.dth == 0:
            self.vy-=2
        elif self.dth < 2:
            self.vy-=5
        elif self.dth < 4:
            self.vy -= 7
        else:
            self.vy -= 9

        if self.x > 800:
            self.x = 800
            self.vx = -self.vx

        if self.dth <= 4 and self.y > 600:
            self.y = 600
            self.vy = 20 - (self.dth + 5)
            self.dth += 1

            if self.vx > 0:
                self.vx = 6 - self.dth
            else:
                self.vx = -5 + self.dth
        
        canv.coords(self.id, self.x - self.r,
                self.y - self.r,
                self.x + self.r,
                self.y + self.r)

    def hittest(self, obj):
        if abs(self.x -obj.x) < self.r + obj.r and abs(self.y -obj.y) < self.r + obj.r:
            return True
        else:
            return False


class gun():
    def __init__(self):
        self.f2_power = 10
        self.f2_on = 0
        self.an = 1
        self.id = canv.create_line(20,450,50,420,width=7)

    def fire2_start(self, event):
        self.f2_on = 1

    def fire2_end(self, event):
        """Выстрел.

        Происходит при отпускании кнопки мыши.
        Начальные значения компонент скорости мяча vx и vy зависят от положения мыши.
        """
        global balls, bullet
        bullet += 1
        new_ball = ball()
        new_ball.r += 5
        self.an = math.atan((event.y-new_ball.y) / (event.x-new_ball.x))
        new_ball.vx = self.f2_power * math.cos(self.an)
        new_ball.vy = - self.f2_power * math.sin(self.an)
        balls += [new_ball]
        self.f2_on = 0
        self.f2_power = 10

    def targetting(self, event=0):
        """Прицеливание. Зависит от положения мыши."""
        if event:
            self.an = math.atan((event.y-450) / (event.x-20))
        if self.f2_on:
            canv.itemconfig(self.id, fill='orange')
        else:
            canv.itemconfig(self.id, fill='black')
        canv.coords(self.id, 20, 450,
                    20 + max(self.f2_power, 20) * math.cos(self.an),
                    450 + max(self.f2_power, 20) * math.sin(self.an)
                    )

    def power_up(self):
        if self.f2_on:
            if self.f2_power < 100:
                self.f2_power += 1
            canv.itemconfig(self.id, fill='orange')
        else:
            canv.itemconfig(self.id, fill='black')


class target():
    def __init__(self):
        self.live = 1
        self.id = canv.create_oval(0,0,0,0)
        self.new_target()
        self.vx = choice([10, -10, 0])
        self.vy = choice([10, -10, 0])

    def new_target(self):
        """ Инициализация новой цели. """
        x = self.x = rnd(600, 780)
        y = self.y = rnd(300, 550)
        r = self.r = rnd(10, 50)
        color = self.color = 'red'
        canv.coords(self.id, x-r, y-r, x+r, y+r)
        canv.itemconfig(self.id, fill=color)
    
    def move(self):
        if self.x + self.r + self.vx > 800:
            self.x = 800 - self.r
            self.vx = -self.vx
        elif self.vx < 0 and self.x - self.r + self.vx < 2:
            self.x = 2 + self.r
            self.vx = -self.vx
        else:
            self.x += self.vx

        if self.y + self.r + self.vy > 600:
            self.y = 600 - self.r
            self.vy = -self.vy
        elif self.vy < 0 and self.y  - self.r + self.vy < 2:
            self.y = 2 + self.r
            self.vy = -self.vy
        else:
            self.y += self.vy

        canv.move(self.id, self.vx, self.vy)

t1 = target()
t2 = target()
screen1 = canv.create_text(400, 300, text='', font='28')
g1 = gun()
bullet = 0
balls = []


def new_game(event=''):
    global gun, t1, t2, screen1, balls, bullet, points
    bullet = 0
    balls = []
    canv.bind('<Button-1>', g1.fire2_start)
    canv.bind('<ButtonRelease-1>', g1.fire2_end)
    canv.bind('<Motion>', g1.targetting)

    id_points = canv.create_text(30,30,text = points,font = '28')

    t1.new_target()
    t2.new_target()

    z = 0.03
    while True:
        t1.move()
        t2.move()
        for b in balls:
            if b.fall != 1:
                b.move()

            if b.hittest(t1):
                points += 1
                canv.itemconfig(screen1, text='')
                canv.itemconfig(id_points, text=points)

                t1.new_target()

            if b.hittest(t2):
                points += 1
                canv.itemconfig(screen1, text='')
                canv.itemconfig(id_points, text=points)

                t2.new_target()

        canv.update()
        time.sleep(0.03)
        g1.targetting()
        g1.power_up()


new_game()

root.mainloop()
